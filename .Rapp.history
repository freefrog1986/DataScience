xbar<-mean(xi)
ybar<-mean(yi)
xi-xbar
yi-ybar
(xi-xbar)^2
(yi-ybar)^2
sum((xi-xbar)^2)
sum((yi-ybar)^2)
(sum((xi-xbar)^2)+sum((yi-ybar)^2))/(7)
sp<-(sum((xi-xbar)^2)+sum((yi-ybar)^2))/(7)
sqrt(sp/5+sp/4)
se<-sqrt(sp/5+sp/4)
(xbar-ybar)/se
qt(p=0.995,df=7)
library(swilr)
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl<-lm(Fertility~.,swiss)
vif(mdl)
mdl2<-lm(Fertility~.-Examination,swiss)
vif(mdl2)
10*sin(40)
10*sin(30)
?sin
sin(30)
sin(3)
sin(1)
2*3.14/6
sind(30)
sin(30d)
sin(3.14/6)
sin(2*pi*40/360)*10
install.packages(caret)
install.packages('caret')
library(caret)
library(kernlab)
install.packages(kernlab)
install.packages('kernlab')
library(caret)
library(kernlab)
data(spam)
# cutting data into different gourps#
library(Hmisc)#
cutWage <- cut2(training$wage, g=3)#
table(cutWage)#
#
p1<- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))#
p2<- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot",'jitter'))#
grid.arrange(p1,p2,ncol=2)
library(ISLR);library(ggplot2);library(caret);#
# look at the data#
data(Wage)#
summary(Wage)#
#
# get training/testing sets#
inTrain <- createDataPartition(y=Wage$wage, p =0.7, list= FALSE)#
training<-Wage[inTrain,]#
testing<-Wage[-inTrain,]#
dim(training);dim(testing)
# Feature plot (caetpackage)#
featurePlot(x=training[,c("age","education","jobclass")],y = training$wage, plot="pairs")#
qplot(age,wage,colour = jobclass, data= training)#
#
# cutting data into different gourps#
library(Hmisc)#
cutWage <- cut2(training$wage, g=3)#
table(cutWage)
p1<- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))#
p2<- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot",'jitter'))#
grid.arrange(p1,p2,ncol=2)
library(grid)
grid.arrange(p1,p2,ncol=2)
grid.arrange()
??grid.arrange
library(gridExtra)
grid.arrange()
library(gridExtra)#
p1<- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))#
p2<- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot",'jitter'))#
grid.arrange(p1,p2,ncol=2)
library(AppliedPredictiveModeling)#
data(concrete)#
library(caret)#
set.seed(1000)#
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]#
training = mixtures[ inTrain,]#
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
install.library("AppliedPredictiveModeling")
?install
install.packages('AppliedPredictiveModeling')
data(concrete)#
library(caret)
library((AppliedPredictiveModeling)
)
library(AppliedPredictiveModeling)
data(concrete)#
library(caret)#
set.seed(1000)#
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]#
training = mixtures[ inTrain,]#
testing = mixtures[-inTrain,]
head(mixtures)
plot(CompressiveStrength)
plot(mixtures$CompressiveStrength,pch=19)
library(Hmisc)
names(mixtures)
plot(mixtures$CompressiveStrength,pch=19,colour="Cement")
plot(mixtures$CompressiveStrength,pch=19,colour=mixtures$Cement)
library(ggplot2)
qplot(CompressiveStrength,pch=19,colour=Cement,data=mixtures)
cut2(mixtures$Cement)
mixtures$Cement<-cut2(mixtures$Cement)
qplot(CompressiveStrength,pch=19,colour=Cement,data=mixtures)
CutCement<-cut2(mixtures$Cement)
library(AppliedPredictiveModeling)#
data(concrete)#
library(caret)#
set.seed(1000)#
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]#
training = mixtures[ inTrain,]#
testing = mixtures[-inTrain,]
CutCement<-cut2(mixtures$Cement)
qplot(CompressiveStrength,pch=19,colour=Cement,data=mixtures)
qplot(CompressiveStrength,pch=19,data=mixtures)
cc<-cut2(mixtures$CompressiveStrength)
qplot(cc,pch=19,data=mixtures)
head(cc)
table(cc)
qplot(cc,data=mixtures)
qplot(cc,data=mixtures,colour=CutCement)
plot(cc)
qplot(cc,data=mixtures,colour=CutCement)
names(mixtures)
qplot(cc,data=mixtures,colour=Age)
qplot(cc,data=mixtures,colour=FlyAsh)
fa<-cut2(mixtures$FlyAsh)
qplot(cc,data=mixtures,colour=fa)
a<-cut2(mixtures$Age)
qplot(cc,data=mixtures,colour=a)
library(AppliedPredictiveModeling)#
data(concrete)#
library(caret)#
set.seed(1000)#
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]#
training = mixtures[ inTrain,]#
testing = mixtures[-inTrain,]
qplot(CompressiveStrength,data=mixtures,colour=CutCement)
qplot(CompressiveStrength,data=mixtures,colour=CutCement,bin=100)
qplot(CompressiveStrength,data=mixtures,colour=CutCement,bin=1)
qplot(CompressiveStrength,data=mixtures,colour=CutCement,bins=1)
qplot(CompressiveStrength,data=mixtures,colour=CutCement,bins=100)
qplot(CompressiveStrength,data=mixtures,colour=Age,bins=100)
qplot(CompressiveStrength,data=mixtures,colour=FlyAsh,bins=100)
qplot(CompressiveStrength,data=mixtures,colour=Superplasticizer,bins=100)
qplot(cc,data=mixtures,colour=Superplasticizer,bins=100)
qplot(cc,data=mixtures,colour=Superplasticizer)
library(AppliedPredictiveModeling)#
data(concrete)#
library(caret)#
set.seed(1000)#
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]#
training = mixtures[ inTrain,]#
testing = mixtures[-inTrain,]
hist(mixtures$SuperPlasticizer)
numeric(mixtures$SuperPlasticizer)
class(mixtures$SuperPlasticizer)
str(mixtures$SuperPlasticizer)
names(mixtures)
hist(mixtures$Superplasticizer)
log(0)
range(mixtures$Superplasticizer)
table(mixtures$Superplasticizer)
plot(mixtures$Superplasticizer)
plot(log(mixtures$Superplasticizer))
plot(log10(mixtures$Superplasticizer))
library(caret)#
library(AppliedPredictiveModeling)#
set.seed(3433)#
data(AlzheimerDisease)#
adData = data.frame(diagnosis,predictors)#
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]#
training = adData[ inTrain,]#
testing = adData[-inTrain,]
names(adData)
grep($IL,names(adData))
grep("$IL",names(adData))
grep("age",names(adData))
grep($"",names(adData))
grep("$IL",names(adData))
grep("$I",names(adData))
grep("I%",names(adData))
grep("IL",names(adData))
in<-grep("IL",names(adData))
index<-grep("IL",names(adData))
subset(adData[,index])
ILad<-subset(adData[,index])
names(ILad)
preProcess(ILad,method=c("center","scale"))
?preProcess
preProcess(ILad)
ILad<-ILad[,-1]
names(ILad)
ILad<-subset(adData[,index])
dim(ILad)
ILad<-ILad[,1:12]
names(ILad)
preProcess(ILad)
preProcess(ILad,method="pca",pcaComp=2)
preProcess(ILad,method="pca")
preProcess(ILad,method="pca",pcaComp=3)
preProcess(ILad,method="pca",pcaComp=4)
?preProcess
preProcess(ILad,method="pca",thresh = 0.9)
library(caret)#
library(AppliedPredictiveModeling)#
set.seed(3433)data(AlzheimerDisease)#
adData = data.frame(diagnosis,predictors)#
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]#
testing = adData[-inTrain,]
library(caret)#
library(AppliedPredictiveModeling)#
set.seed(3433);data(AlzheimerDisease)#
adData = data.frame(diagnosis,predictors)#
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]#
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
grep("IL",adData)
grep("IL",names(adData))
grep(diagnosis,names(adData))
grep("diagnosis",names(adData))
names(adData)[1]
index<-grep("IL",names(adData))
newdata<-adData[,index]
names(newdatq)
names(newdata)
newdata<-newdata[,1:12]
newdata<-adData[,1]
names(newdata)
newdata
newdata<-adData[,index]
names(newdata)
newdata<-newdata[,1:12]
names(newdata)
adData[,1]
names(adData)
subset(adData[,1])
newdata<-newdata[,1:12]+adData[,1]
newdata<-cbind(newdata[,1:12],adData[,1])
names(newdata)
head(newdata[,13])
prep<-preProcess(adData,method="pca",thresh = 0.8)
?train
train1<-newdata[intrain,]
train1<-newdata[inTrain,]
lm1<-train(diagnosis~.,method="glm",data=train1)
dim(train1)
dim(train1$diagnosis)
length(train1$diagnosis)
train1$diagnosis
newData
newdata
names(newdata)
names(newdata)[13]
names(newdata)[13]<-"diagnosis"
names(newdata)
train1<-newdata[inTrain,]
train1
lm1<-train(diagnosis~.,method="glm",data=train1)
prep<-preProcess(adData,method="pca",thresh = 0.)
prep<-preProcess(adData,method="pca",thresh = 0.8)
prep
lm2<-train(diagnosis~.,method="glm",data=prep)
trainPC <- predict(prep, train1 )
modelFit <- train(training$diagnosis ~.,method="glm",preProcess="pca",data=training)
names(training)
head(prep)
prep
lm1
lm1<-train(diagnosis~.,method="glm",data=train1)
names(train1)
lm1<-train(diagnosis~.,method="glm",data=newdata)
lm1
?train
trainPC <- predict(prep, adData)
lm2<-train(diagnosis~.,method="glm",data=trainPC)
lm2
?getSymbols
??getSymbols
?to.monthly
??to.monthly
?kmeans
lm
show
predict
dgamma
mean
colSums
mean
lm
show
predict
dgamma
colSums
?showMethods()
?getMethod()
?getS3method()
?getMethod()
setwd(/Users/freefrog/Studing/DataScience/DataScience)
setwd('/Users/freefrog/Studing/DataScience/DataScience')
read.csv('/Users/freefrog/Studing/DataScience/DataScience/GDPdata.csv')
read.csv('GDPdata.csv')
read.csv('GDPdata2.csv')
read.csv('GDPdata3.csv')
